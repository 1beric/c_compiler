Grammar

    0 $accept: prog $end

    1 prog: type id_list ';' prog
    2     | type Ident '(' SetFnInfo parm_types ')' fprotRest prog
    3     | Extern type Ident '(' SetFnInfo parm_types ')' fprotRest prog

    4 $@1: %empty

    5 $@2: %empty

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog
    7     | %empty

    8 Extern: EXTERN

    9 SetFnInfo: %empty

   10 $@3: %empty

   11 fprotRest: comma $@3 fprototype SetFnInfo fprotRest
   12          | ';'

   13 fprototype: Ident '(' parm_types ')'

   14 parm_types: VOID
   15           | nonempty_parm_type_list

   16 nonempty_parm_type_list: nonempty_parm_type_list comma parm_type_decl
   17                        | parm_type_decl

   18 parm_type_decl: type Ident
   19               | type Ident '[' ']'

   20 type: INT
   21     | CHAR
   22     | VOID

   23 var_decls: var_decls var_decl ';'
   24          | %empty

   25 var_decl: type id_list

   26 $@4: %empty

   27 id_list: id_list comma $@4 id_decl

   28 $@5: %empty

   29 id_list: error comma $@5 id_decl
   30        | id_decl

   31 id_decl: Ident
   32        | Ident '[' ArraySize ']'

   33 ArraySize: INTCON

   34 stmt_list: stmt stmt_list
   35          | %empty

   36 stmt: IF '(' boolexp ')' stmt optional_else
   37     | WHILE '(' boolexp ')' stmt
   38     | FOR '(' optional_assgt semicolon optional_boolexp semicolon optional_assgt ')' stmt
   39     | RETURN optional_expr semicolon
   40     | assignment semicolon
   41     | proc_call semicolon
   42     | compound_stmt
   43     | ';'
   44     | error

   45 semicolon: ';'

   46 $@6: %empty

   47 semicolon: $@6 error

   48 comma: ','

   49 $@7: %empty

   50 comma: $@7 error

   51 compound_stmt: '{' stmt_list '}'

   52 optional_else: ELSE stmt
   53              | %empty

   54 optional_assgt: assignment
   55               | %empty

   56 optional_expr: expr
   57              | %empty

   58 optional_boolexp: boolexp
   59                 | %empty

   60 assignment: variable '=' expr

   61 boolexp: expr EQ expr
   62        | expr NEQ expr
   63        | expr LE expr
   64        | expr GE expr
   65        | expr '<' expr
   66        | expr '>' expr
   67        | '!' boolexp
   68        | boolexp AND boolexp
   69        | boolexp OR boolexp
   70        | '(' boolexp ')'

   71 expr: '-' expr
   72     | expr '+' expr
   73     | expr '-' expr
   74     | expr '*' expr
   75     | expr '/' expr
   76     | fun_call
   77     | variable
   78     | '(' expr ')'
   79     | '(' error ')'
   80     | INTCON
   81     | CHARCON
   82     | STRINGCON

   83 fun_call: Ident '(' ')'
   84         | Ident '(' expr_list ')'
   85         | Ident '(' error ')'

   86 proc_call: Ident '(' ')'
   87          | Ident '(' expr_list ')'
   88          | Ident '(' error ')'

   89 variable: Ident
   90         | Ident '[' expr ']'
   91         | Ident '[' error ']'

   92 expr_list: expr comma expr_list
   93          | expr

   94 Ident: ID


Terminals, with rules where they appear

$end (0) 0
'!' (33) 67
'(' (40) 2 3 6 13 36 37 38 70 78 79 83 84 85 86 87 88
')' (41) 2 3 6 13 36 37 38 70 78 79 83 84 85 86 87 88
'*' (42) 74
'+' (43) 72
',' (44) 48
'-' (45) 71 73
'/' (47) 75
';' (59) 1 12 23 43 45
'<' (60) 65
'=' (61) 60
'>' (62) 66
'[' (91) 19 32 90 91
']' (93) 19 32 90 91
'{' (123) 6 51
'}' (125) 6 51
error (256) 29 44 47 50 79 85 88 91
ID (258) 94
INTCON (259) 33 80
CHARCON (260) 81
STRINGCON (261) 82
CHAR (262) 21
INT (263) 20
VOID (264) 14 22
EXTERN (265) 8
IF (266) 36
ELSE (267) 52
WHILE (268) 37
FOR (269) 38
RETURN (270) 39
AND (271) 68
OR (272) 69
EQ (273) 61
NEQ (274) 62
LE (275) 63
GE (276) 64
IFX (277)


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
prog (40)
    on left: 1 2 3 6 7, on right: 0 1 2 3 6
$@1 (41)
    on left: 4, on right: 6
$@2 (42)
    on left: 5, on right: 6
Extern (43)
    on left: 8, on right: 3
SetFnInfo (44)
    on left: 9, on right: 2 3 6 11
fprotRest (45)
    on left: 11 12, on right: 2 3 11
$@3 (46)
    on left: 10, on right: 11
fprototype (47)
    on left: 13, on right: 11
parm_types (48)
    on left: 14 15, on right: 2 3 6 13
nonempty_parm_type_list (49)
    on left: 16 17, on right: 15 16
parm_type_decl (50)
    on left: 18 19, on right: 16 17
type (51)
    on left: 20 21 22, on right: 1 2 3 6 18 19 25
var_decls (52)
    on left: 23 24, on right: 6 23
var_decl (53)
    on left: 25, on right: 23
id_list (54)
    on left: 27 29 30, on right: 1 25 27
$@4 (55)
    on left: 26, on right: 27
$@5 (56)
    on left: 28, on right: 29
id_decl (57)
    on left: 31 32, on right: 27 29 30
ArraySize (58)
    on left: 33, on right: 32
stmt_list (59)
    on left: 34 35, on right: 6 34 51
stmt (60)
    on left: 36 37 38 39 40 41 42 43 44, on right: 34 36 37 38 52
semicolon (61)
    on left: 45 47, on right: 38 39 40 41
$@6 (62)
    on left: 46, on right: 47
comma (63)
    on left: 48 50, on right: 11 16 27 29 92
$@7 (64)
    on left: 49, on right: 50
compound_stmt (65)
    on left: 51, on right: 42
optional_else (66)
    on left: 52 53, on right: 36
optional_assgt (67)
    on left: 54 55, on right: 38
optional_expr (68)
    on left: 56 57, on right: 39
optional_boolexp (69)
    on left: 58 59, on right: 38
assignment (70)
    on left: 60, on right: 40 54
boolexp (71)
    on left: 61 62 63 64 65 66 67 68 69 70, on right: 36 37 58 67 68
    69 70
expr (72)
    on left: 71 72 73 74 75 76 77 78 79 80 81 82, on right: 56 60 61
    62 63 64 65 66 71 72 73 74 75 78 90 92 93
fun_call (73)
    on left: 83 84 85, on right: 76
proc_call (74)
    on left: 86 87 88, on right: 41
variable (75)
    on left: 89 90 91, on right: 60 77
expr_list (76)
    on left: 92 93, on right: 84 87 92
Ident (77)
    on left: 94, on right: 2 3 6 13 18 19 31 32 83 84 85 86 87 88 89
    90 91


State 0

    0 $accept: . prog $end

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    EXTERN  shift, and go to state 4

    $default  reduce using rule 7 (prog)

    prog    go to state 5
    Extern  go to state 6
    type    go to state 7


State 1

   21 type: CHAR .

    $default  reduce using rule 21 (type)


State 2

   20 type: INT .

    $default  reduce using rule 20 (type)


State 3

   22 type: VOID .

    $default  reduce using rule 22 (type)


State 4

    8 Extern: EXTERN .

    $default  reduce using rule 8 (Extern)


State 5

    0 $accept: prog . $end

    $end  shift, and go to state 8


State 6

    3 prog: Extern . type Ident '(' SetFnInfo parm_types ')' fprotRest prog

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type  go to state 9


State 7

    1 prog: type . id_list ';' prog
    2     | type . Ident '(' SetFnInfo parm_types ')' fprotRest prog
    6     | type . Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog

    error  shift, and go to state 10
    ID     shift, and go to state 11

    id_list  go to state 12
    id_decl  go to state 13
    Ident    go to state 14


State 8

    0 $accept: prog $end .

    $default  accept


State 9

    3 prog: Extern type . Ident '(' SetFnInfo parm_types ')' fprotRest prog

    ID  shift, and go to state 11

    Ident  go to state 15


State 10

   29 id_list: error . comma $@5 id_decl

    ','  shift, and go to state 16

    $default  reduce using rule 49 ($@7)

    comma  go to state 17
    $@7    go to state 18


State 11

   94 Ident: ID .

    $default  reduce using rule 94 (Ident)


State 12

    1 prog: type id_list . ';' prog
   27 id_list: id_list . comma $@4 id_decl

    ','  shift, and go to state 16
    ';'  shift, and go to state 19

    $default  reduce using rule 49 ($@7)

    comma  go to state 20
    $@7    go to state 18


State 13

   30 id_list: id_decl .

    $default  reduce using rule 30 (id_list)


State 14

    2 prog: type Ident . '(' SetFnInfo parm_types ')' fprotRest prog
    6     | type Ident . '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog
   31 id_decl: Ident .
   32        | Ident . '[' ArraySize ']'

    '('  shift, and go to state 21
    '['  shift, and go to state 22

    $default  reduce using rule 31 (id_decl)


State 15

    3 prog: Extern type Ident . '(' SetFnInfo parm_types ')' fprotRest prog

    '('  shift, and go to state 23


State 16

   48 comma: ',' .

    $default  reduce using rule 48 (comma)


State 17

   29 id_list: error comma . $@5 id_decl

    $default  reduce using rule 28 ($@5)

    $@5  go to state 24


State 18

   50 comma: $@7 . error

    error  shift, and go to state 25


State 19

    1 prog: type id_list ';' . prog

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    EXTERN  shift, and go to state 4

    $default  reduce using rule 7 (prog)

    prog    go to state 26
    Extern  go to state 6
    type    go to state 7


State 20

   27 id_list: id_list comma . $@4 id_decl

    $default  reduce using rule 26 ($@4)

    $@4  go to state 27


State 21

    2 prog: type Ident '(' . SetFnInfo parm_types ')' fprotRest prog
    6     | type Ident '(' . SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog

    $default  reduce using rule 9 (SetFnInfo)

    SetFnInfo  go to state 28


State 22

   32 id_decl: Ident '[' . ArraySize ']'

    INTCON  shift, and go to state 29

    ArraySize  go to state 30


State 23

    3 prog: Extern type Ident '(' . SetFnInfo parm_types ')' fprotRest prog

    $default  reduce using rule 9 (SetFnInfo)

    SetFnInfo  go to state 31


State 24

   29 id_list: error comma $@5 . id_decl

    ID  shift, and go to state 11

    id_decl  go to state 32
    Ident    go to state 33


State 25

   50 comma: $@7 error .

    $default  reduce using rule 50 (comma)


State 26

    1 prog: type id_list ';' prog .

    $default  reduce using rule 1 (prog)


State 27

   27 id_list: id_list comma $@4 . id_decl

    ID  shift, and go to state 11

    id_decl  go to state 34
    Ident    go to state 33


State 28

    2 prog: type Ident '(' SetFnInfo . parm_types ')' fprotRest prog
    6     | type Ident '(' SetFnInfo . parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 35

    parm_types               go to state 36
    nonempty_parm_type_list  go to state 37
    parm_type_decl           go to state 38
    type                     go to state 39


State 29

   33 ArraySize: INTCON .

    $default  reduce using rule 33 (ArraySize)


State 30

   32 id_decl: Ident '[' ArraySize . ']'

    ']'  shift, and go to state 40


State 31

    3 prog: Extern type Ident '(' SetFnInfo . parm_types ')' fprotRest prog

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 35

    parm_types               go to state 41
    nonempty_parm_type_list  go to state 37
    parm_type_decl           go to state 38
    type                     go to state 39


State 32

   29 id_list: error comma $@5 id_decl .

    $default  reduce using rule 29 (id_list)


State 33

   31 id_decl: Ident .
   32        | Ident . '[' ArraySize ']'

    '['  shift, and go to state 22

    $default  reduce using rule 31 (id_decl)


State 34

   27 id_list: id_list comma $@4 id_decl .

    $default  reduce using rule 27 (id_list)


State 35

   14 parm_types: VOID .
   22 type: VOID .

    ID        reduce using rule 22 (type)
    $default  reduce using rule 14 (parm_types)


State 36

    2 prog: type Ident '(' SetFnInfo parm_types . ')' fprotRest prog
    6     | type Ident '(' SetFnInfo parm_types . ')' '{' $@1 var_decls stmt_list '}' $@2 prog

    ')'  shift, and go to state 42


State 37

   15 parm_types: nonempty_parm_type_list .
   16 nonempty_parm_type_list: nonempty_parm_type_list . comma parm_type_decl

    ','  shift, and go to state 16

    error     reduce using rule 49 ($@7)
    $default  reduce using rule 15 (parm_types)

    comma  go to state 43
    $@7    go to state 18


State 38

   17 nonempty_parm_type_list: parm_type_decl .

    $default  reduce using rule 17 (nonempty_parm_type_list)


State 39

   18 parm_type_decl: type . Ident
   19               | type . Ident '[' ']'

    ID  shift, and go to state 11

    Ident  go to state 44


State 40

   32 id_decl: Ident '[' ArraySize ']' .

    $default  reduce using rule 32 (id_decl)


State 41

    3 prog: Extern type Ident '(' SetFnInfo parm_types . ')' fprotRest prog

    ')'  shift, and go to state 45


State 42

    2 prog: type Ident '(' SetFnInfo parm_types ')' . fprotRest prog
    6     | type Ident '(' SetFnInfo parm_types ')' . '{' $@1 var_decls stmt_list '}' $@2 prog

    ','  shift, and go to state 16
    ';'  shift, and go to state 46
    '{'  shift, and go to state 47

    $default  reduce using rule 49 ($@7)

    fprotRest  go to state 48
    comma      go to state 49
    $@7        go to state 18


State 43

   16 nonempty_parm_type_list: nonempty_parm_type_list comma . parm_type_decl

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    parm_type_decl  go to state 50
    type            go to state 39


State 44

   18 parm_type_decl: type Ident .
   19               | type Ident . '[' ']'

    '['  shift, and go to state 51

    $default  reduce using rule 18 (parm_type_decl)


State 45

    3 prog: Extern type Ident '(' SetFnInfo parm_types ')' . fprotRest prog

    ','  shift, and go to state 16
    ';'  shift, and go to state 46

    $default  reduce using rule 49 ($@7)

    fprotRest  go to state 52
    comma      go to state 49
    $@7        go to state 18


State 46

   12 fprotRest: ';' .

    $default  reduce using rule 12 (fprotRest)


State 47

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' . $@1 var_decls stmt_list '}' $@2 prog

    $default  reduce using rule 4 ($@1)

    $@1  go to state 53


State 48

    2 prog: type Ident '(' SetFnInfo parm_types ')' fprotRest . prog

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    EXTERN  shift, and go to state 4

    $default  reduce using rule 7 (prog)

    prog    go to state 54
    Extern  go to state 6
    type    go to state 7


State 49

   11 fprotRest: comma . $@3 fprototype SetFnInfo fprotRest

    $default  reduce using rule 10 ($@3)

    $@3  go to state 55


State 50

   16 nonempty_parm_type_list: nonempty_parm_type_list comma parm_type_decl .

    $default  reduce using rule 16 (nonempty_parm_type_list)


State 51

   19 parm_type_decl: type Ident '[' . ']'

    ']'  shift, and go to state 56


State 52

    3 prog: Extern type Ident '(' SetFnInfo parm_types ')' fprotRest . prog

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    EXTERN  shift, and go to state 4

    $default  reduce using rule 7 (prog)

    prog    go to state 57
    Extern  go to state 6
    type    go to state 7


State 53

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 . var_decls stmt_list '}' $@2 prog

    $default  reduce using rule 24 (var_decls)

    var_decls  go to state 58


State 54

    2 prog: type Ident '(' SetFnInfo parm_types ')' fprotRest prog .

    $default  reduce using rule 2 (prog)


State 55

   11 fprotRest: comma $@3 . fprototype SetFnInfo fprotRest

    ID  shift, and go to state 11

    fprototype  go to state 59
    Ident       go to state 60


State 56

   19 parm_type_decl: type Ident '[' ']' .

    $default  reduce using rule 19 (parm_type_decl)


State 57

    3 prog: Extern type Ident '(' SetFnInfo parm_types ')' fprotRest prog .

    $default  reduce using rule 3 (prog)


State 58

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls . stmt_list '}' $@2 prog
   23 var_decls: var_decls . var_decl ';'

    error   shift, and go to state 61
    ID      shift, and go to state 11
    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    '}'  reduce using rule 35 (stmt_list)

    type           go to state 68
    var_decl       go to state 69
    stmt_list      go to state 70
    stmt           go to state 71
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 59

   11 fprotRest: comma $@3 fprototype . SetFnInfo fprotRest

    $default  reduce using rule 9 (SetFnInfo)

    SetFnInfo  go to state 77


State 60

   13 fprototype: Ident . '(' parm_types ')'

    '('  shift, and go to state 78


State 61

   44 stmt: error .

    $default  reduce using rule 44 (stmt)


State 62

   36 stmt: IF . '(' boolexp ')' stmt optional_else

    '('  shift, and go to state 79


State 63

   37 stmt: WHILE . '(' boolexp ')' stmt

    '('  shift, and go to state 80


State 64

   38 stmt: FOR . '(' optional_assgt semicolon optional_boolexp semicolon optional_assgt ')' stmt

    '('  shift, and go to state 81


State 65

   39 stmt: RETURN . optional_expr semicolon

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    $default  reduce using rule 57 (optional_expr)

    optional_expr  go to state 87
    expr           go to state 88
    fun_call       go to state 89
    variable       go to state 90
    Ident          go to state 91


State 66

   43 stmt: ';' .

    $default  reduce using rule 43 (stmt)


State 67

   51 compound_stmt: '{' . stmt_list '}'

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    '}'  reduce using rule 35 (stmt_list)

    stmt_list      go to state 92
    stmt           go to state 71
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 68

   25 var_decl: type . id_list

    error  shift, and go to state 10
    ID     shift, and go to state 11

    id_list  go to state 93
    id_decl  go to state 13
    Ident    go to state 33


State 69

   23 var_decls: var_decls var_decl . ';'

    ';'  shift, and go to state 94


State 70

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list . '}' $@2 prog

    '}'  shift, and go to state 95


State 71

   34 stmt_list: stmt . stmt_list

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    '}'  reduce using rule 35 (stmt_list)

    stmt_list      go to state 96
    stmt           go to state 71
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 72

   42 stmt: compound_stmt .

    $default  reduce using rule 42 (stmt)


State 73

   40 stmt: assignment . semicolon

    ';'  shift, and go to state 97

    $default  reduce using rule 46 ($@6)

    semicolon  go to state 98
    $@6        go to state 99


State 74

   41 stmt: proc_call . semicolon

    ';'  shift, and go to state 97

    $default  reduce using rule 46 ($@6)

    semicolon  go to state 100
    $@6        go to state 99


State 75

   60 assignment: variable . '=' expr

    '='  shift, and go to state 101


State 76

   86 proc_call: Ident . '(' ')'
   87          | Ident . '(' expr_list ')'
   88          | Ident . '(' error ')'
   89 variable: Ident .
   90         | Ident . '[' expr ']'
   91         | Ident . '[' error ']'

    '('  shift, and go to state 102
    '['  shift, and go to state 103

    $default  reduce using rule 89 (variable)


State 77

   11 fprotRest: comma $@3 fprototype SetFnInfo . fprotRest

    ','  shift, and go to state 16
    ';'  shift, and go to state 46

    $default  reduce using rule 49 ($@7)

    fprotRest  go to state 104
    comma      go to state 49
    $@7        go to state 18


State 78

   13 fprototype: Ident '(' . parm_types ')'

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 35

    parm_types               go to state 105
    nonempty_parm_type_list  go to state 37
    parm_type_decl           go to state 38
    type                     go to state 39


State 79

   36 stmt: IF '(' . boolexp ')' stmt optional_else

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 108
    expr      go to state 109
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 80

   37 stmt: WHILE '(' . boolexp ')' stmt

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 110
    expr      go to state 109
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 81

   38 stmt: FOR '(' . optional_assgt semicolon optional_boolexp semicolon optional_assgt ')' stmt

    ID  shift, and go to state 11

    $default  reduce using rule 55 (optional_assgt)

    optional_assgt  go to state 111
    assignment      go to state 112
    variable        go to state 75
    Ident           go to state 113


State 82

   80 expr: INTCON .

    $default  reduce using rule 80 (expr)


State 83

   81 expr: CHARCON .

    $default  reduce using rule 81 (expr)


State 84

   82 expr: STRINGCON .

    $default  reduce using rule 82 (expr)


State 85

   71 expr: '-' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 114
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 86

   78 expr: '(' . expr ')'
   79     | '(' . error ')'

    error      shift, and go to state 115
    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 116
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 87

   39 stmt: RETURN optional_expr . semicolon

    ';'  shift, and go to state 97

    $default  reduce using rule 46 ($@6)

    semicolon  go to state 117
    $@6        go to state 99


State 88

   56 optional_expr: expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 56 (optional_expr)


State 89

   76 expr: fun_call .

    $default  reduce using rule 76 (expr)


State 90

   77 expr: variable .

    $default  reduce using rule 77 (expr)


State 91

   83 fun_call: Ident . '(' ')'
   84         | Ident . '(' expr_list ')'
   85         | Ident . '(' error ')'
   89 variable: Ident .
   90         | Ident . '[' expr ']'
   91         | Ident . '[' error ']'

    '('  shift, and go to state 122
    '['  shift, and go to state 103

    $default  reduce using rule 89 (variable)


State 92

   51 compound_stmt: '{' stmt_list . '}'

    '}'  shift, and go to state 123


State 93

   25 var_decl: type id_list .
   27 id_list: id_list . comma $@4 id_decl

    ','  shift, and go to state 16

    error     reduce using rule 49 ($@7)
    $default  reduce using rule 25 (var_decl)

    comma  go to state 20
    $@7    go to state 18


State 94

   23 var_decls: var_decls var_decl ';' .

    $default  reduce using rule 23 (var_decls)


State 95

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' . $@2 prog

    $default  reduce using rule 5 ($@2)

    $@2  go to state 124


State 96

   34 stmt_list: stmt stmt_list .

    $default  reduce using rule 34 (stmt_list)


State 97

   45 semicolon: ';' .

    $default  reduce using rule 45 (semicolon)


State 98

   40 stmt: assignment semicolon .

    $default  reduce using rule 40 (stmt)


State 99

   47 semicolon: $@6 . error

    error  shift, and go to state 125


State 100

   41 stmt: proc_call semicolon .

    $default  reduce using rule 41 (stmt)


State 101

   60 assignment: variable '=' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 126
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 102

   86 proc_call: Ident '(' . ')'
   87          | Ident '(' . expr_list ')'
   88          | Ident '(' . error ')'

    error      shift, and go to state 127
    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86
    ')'        shift, and go to state 128

    expr       go to state 129
    fun_call   go to state 89
    variable   go to state 90
    expr_list  go to state 130
    Ident      go to state 91


State 103

   90 variable: Ident '[' . expr ']'
   91         | Ident '[' . error ']'

    error      shift, and go to state 131
    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 132
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 104

   11 fprotRest: comma $@3 fprototype SetFnInfo fprotRest .

    $default  reduce using rule 11 (fprotRest)


State 105

   13 fprototype: Ident '(' parm_types . ')'

    ')'  shift, and go to state 133


State 106

   67 boolexp: '!' . boolexp

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 134
    expr      go to state 109
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 107

   70 boolexp: '(' . boolexp ')'
   78 expr: '(' . expr ')'
   79     | '(' . error ')'

    error      shift, and go to state 115
    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 135
    expr      go to state 136
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 108

   36 stmt: IF '(' boolexp . ')' stmt optional_else
   68 boolexp: boolexp . AND boolexp
   69        | boolexp . OR boolexp

    AND  shift, and go to state 137
    OR   shift, and go to state 138
    ')'  shift, and go to state 139


State 109

   61 boolexp: expr . EQ expr
   62        | expr . NEQ expr
   63        | expr . LE expr
   64        | expr . GE expr
   65        | expr . '<' expr
   66        | expr . '>' expr
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    EQ   shift, and go to state 140
    NEQ  shift, and go to state 141
    LE   shift, and go to state 142
    GE   shift, and go to state 143
    '<'  shift, and go to state 144
    '>'  shift, and go to state 145
    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121


State 110

   37 stmt: WHILE '(' boolexp . ')' stmt
   68 boolexp: boolexp . AND boolexp
   69        | boolexp . OR boolexp

    AND  shift, and go to state 137
    OR   shift, and go to state 138
    ')'  shift, and go to state 146


State 111

   38 stmt: FOR '(' optional_assgt . semicolon optional_boolexp semicolon optional_assgt ')' stmt

    ';'  shift, and go to state 97

    $default  reduce using rule 46 ($@6)

    semicolon  go to state 147
    $@6        go to state 99


State 112

   54 optional_assgt: assignment .

    $default  reduce using rule 54 (optional_assgt)


State 113

   89 variable: Ident .
   90         | Ident . '[' expr ']'
   91         | Ident . '[' error ']'

    '['  shift, and go to state 103

    $default  reduce using rule 89 (variable)


State 114

   71 expr: '-' expr .
   72     | expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    $default  reduce using rule 71 (expr)


State 115

   79 expr: '(' error . ')'

    ')'  shift, and go to state 148


State 116

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr
   78     | '(' expr . ')'

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121
    ')'  shift, and go to state 149


State 117

   39 stmt: RETURN optional_expr semicolon .

    $default  reduce using rule 39 (stmt)


State 118

   72 expr: expr '+' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 150
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 119

   73 expr: expr '-' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 151
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 120

   74 expr: expr '*' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 152
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 121

   75 expr: expr '/' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 153
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 122

   83 fun_call: Ident '(' . ')'
   84         | Ident '(' . expr_list ')'
   85         | Ident '(' . error ')'

    error      shift, and go to state 154
    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86
    ')'        shift, and go to state 155

    expr       go to state 129
    fun_call   go to state 89
    variable   go to state 90
    expr_list  go to state 156
    Ident      go to state 91


State 123

   51 compound_stmt: '{' stmt_list '}' .

    $default  reduce using rule 51 (compound_stmt)


State 124

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 . prog

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    EXTERN  shift, and go to state 4

    $default  reduce using rule 7 (prog)

    prog    go to state 157
    Extern  go to state 6
    type    go to state 7


State 125

   47 semicolon: $@6 error .

    $default  reduce using rule 47 (semicolon)


State 126

   60 assignment: variable '=' expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 60 (assignment)


State 127

   88 proc_call: Ident '(' error . ')'

    ')'  shift, and go to state 158


State 128

   86 proc_call: Ident '(' ')' .

    $default  reduce using rule 86 (proc_call)


State 129

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr
   92 expr_list: expr . comma expr_list
   93          | expr .

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121
    ','  shift, and go to state 16

    ')'       reduce using rule 93 (expr_list)
    $default  reduce using rule 49 ($@7)

    comma  go to state 159
    $@7    go to state 18


State 130

   87 proc_call: Ident '(' expr_list . ')'

    ')'  shift, and go to state 160


State 131

   91 variable: Ident '[' error . ']'

    ']'  shift, and go to state 161


State 132

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr
   90 variable: Ident '[' expr . ']'

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121
    ']'  shift, and go to state 162


State 133

   13 fprototype: Ident '(' parm_types ')' .

    $default  reduce using rule 13 (fprototype)


State 134

   67 boolexp: '!' boolexp .
   68        | boolexp . AND boolexp
   69        | boolexp . OR boolexp

    $default  reduce using rule 67 (boolexp)


State 135

   68 boolexp: boolexp . AND boolexp
   69        | boolexp . OR boolexp
   70        | '(' boolexp . ')'

    AND  shift, and go to state 137
    OR   shift, and go to state 138
    ')'  shift, and go to state 163


State 136

   61 boolexp: expr . EQ expr
   62        | expr . NEQ expr
   63        | expr . LE expr
   64        | expr . GE expr
   65        | expr . '<' expr
   66        | expr . '>' expr
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr
   78     | '(' expr . ')'

    EQ   shift, and go to state 140
    NEQ  shift, and go to state 141
    LE   shift, and go to state 142
    GE   shift, and go to state 143
    '<'  shift, and go to state 144
    '>'  shift, and go to state 145
    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121
    ')'  shift, and go to state 149


State 137

   68 boolexp: boolexp AND . boolexp

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 164
    expr      go to state 109
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 138

   69 boolexp: boolexp OR . boolexp

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    boolexp   go to state 165
    expr      go to state 109
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 139

   36 stmt: IF '(' boolexp ')' . stmt optional_else

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    stmt           go to state 166
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 140

   61 boolexp: expr EQ . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 167
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 141

   62 boolexp: expr NEQ . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 168
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 142

   63 boolexp: expr LE . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 169
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 143

   64 boolexp: expr GE . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 170
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 144

   65 boolexp: expr '<' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 171
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 145

   66 boolexp: expr '>' . expr

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr      go to state 172
    fun_call  go to state 89
    variable  go to state 90
    Ident     go to state 91


State 146

   37 stmt: WHILE '(' boolexp ')' . stmt

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    stmt           go to state 173
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 147

   38 stmt: FOR '(' optional_assgt semicolon . optional_boolexp semicolon optional_assgt ')' stmt

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '!'        shift, and go to state 106
    '-'        shift, and go to state 85
    '('        shift, and go to state 107

    $default  reduce using rule 59 (optional_boolexp)

    optional_boolexp  go to state 174
    boolexp           go to state 175
    expr              go to state 109
    fun_call          go to state 89
    variable          go to state 90
    Ident             go to state 91


State 148

   79 expr: '(' error ')' .

    $default  reduce using rule 79 (expr)


State 149

   78 expr: '(' expr ')' .

    $default  reduce using rule 78 (expr)


State 150

   72 expr: expr . '+' expr
   72     | expr '+' expr .
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 72 (expr)


State 151

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   73     | expr '-' expr .
   74     | expr . '*' expr
   75     | expr . '/' expr

    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 73 (expr)


State 152

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   74     | expr '*' expr .
   75     | expr . '/' expr

    $default  reduce using rule 74 (expr)


State 153

   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr
   75     | expr '/' expr .

    $default  reduce using rule 75 (expr)


State 154

   85 fun_call: Ident '(' error . ')'

    ')'  shift, and go to state 176


State 155

   83 fun_call: Ident '(' ')' .

    $default  reduce using rule 83 (fun_call)


State 156

   84 fun_call: Ident '(' expr_list . ')'

    ')'  shift, and go to state 177


State 157

    6 prog: type Ident '(' SetFnInfo parm_types ')' '{' $@1 var_decls stmt_list '}' $@2 prog .

    $default  reduce using rule 6 (prog)


State 158

   88 proc_call: Ident '(' error ')' .

    $default  reduce using rule 88 (proc_call)


State 159

   92 expr_list: expr comma . expr_list

    ID         shift, and go to state 11
    INTCON     shift, and go to state 82
    CHARCON    shift, and go to state 83
    STRINGCON  shift, and go to state 84
    '-'        shift, and go to state 85
    '('        shift, and go to state 86

    expr       go to state 129
    fun_call   go to state 89
    variable   go to state 90
    expr_list  go to state 178
    Ident      go to state 91


State 160

   87 proc_call: Ident '(' expr_list ')' .

    $default  reduce using rule 87 (proc_call)


State 161

   91 variable: Ident '[' error ']' .

    $default  reduce using rule 91 (variable)


State 162

   90 variable: Ident '[' expr ']' .

    $default  reduce using rule 90 (variable)


State 163

   70 boolexp: '(' boolexp ')' .

    $default  reduce using rule 70 (boolexp)


State 164

   68 boolexp: boolexp . AND boolexp
   68        | boolexp AND boolexp .
   69        | boolexp . OR boolexp

    $default  reduce using rule 68 (boolexp)


State 165

   68 boolexp: boolexp . AND boolexp
   69        | boolexp . OR boolexp
   69        | boolexp OR boolexp .

    $default  reduce using rule 69 (boolexp)


State 166

   36 stmt: IF '(' boolexp ')' stmt . optional_else

    ELSE  shift, and go to state 179

    $default  reduce using rule 53 (optional_else)

    optional_else  go to state 180


State 167

   61 boolexp: expr EQ expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 61 (boolexp)


State 168

   62 boolexp: expr NEQ expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 62 (boolexp)


State 169

   63 boolexp: expr LE expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 63 (boolexp)


State 170

   64 boolexp: expr GE expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 64 (boolexp)


State 171

   65 boolexp: expr '<' expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 65 (boolexp)


State 172

   66 boolexp: expr '>' expr .
   72 expr: expr . '+' expr
   73     | expr . '-' expr
   74     | expr . '*' expr
   75     | expr . '/' expr

    '+'  shift, and go to state 118
    '-'  shift, and go to state 119
    '*'  shift, and go to state 120
    '/'  shift, and go to state 121

    $default  reduce using rule 66 (boolexp)


State 173

   37 stmt: WHILE '(' boolexp ')' stmt .

    $default  reduce using rule 37 (stmt)


State 174

   38 stmt: FOR '(' optional_assgt semicolon optional_boolexp . semicolon optional_assgt ')' stmt

    ';'  shift, and go to state 97

    $default  reduce using rule 46 ($@6)

    semicolon  go to state 181
    $@6        go to state 99


State 175

   58 optional_boolexp: boolexp .
   68 boolexp: boolexp . AND boolexp
   69        | boolexp . OR boolexp

    AND  shift, and go to state 137
    OR   shift, and go to state 138

    $default  reduce using rule 58 (optional_boolexp)


State 176

   85 fun_call: Ident '(' error ')' .

    $default  reduce using rule 85 (fun_call)


State 177

   84 fun_call: Ident '(' expr_list ')' .

    $default  reduce using rule 84 (fun_call)


State 178

   92 expr_list: expr comma expr_list .

    $default  reduce using rule 92 (expr_list)


State 179

   52 optional_else: ELSE . stmt

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    stmt           go to state 182
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 180

   36 stmt: IF '(' boolexp ')' stmt optional_else .

    $default  reduce using rule 36 (stmt)


State 181

   38 stmt: FOR '(' optional_assgt semicolon optional_boolexp semicolon . optional_assgt ')' stmt

    ID  shift, and go to state 11

    $default  reduce using rule 55 (optional_assgt)

    optional_assgt  go to state 183
    assignment      go to state 112
    variable        go to state 75
    Ident           go to state 113


State 182

   52 optional_else: ELSE stmt .

    $default  reduce using rule 52 (optional_else)


State 183

   38 stmt: FOR '(' optional_assgt semicolon optional_boolexp semicolon optional_assgt . ')' stmt

    ')'  shift, and go to state 184


State 184

   38 stmt: FOR '(' optional_assgt semicolon optional_boolexp semicolon optional_assgt ')' . stmt

    error   shift, and go to state 61
    ID      shift, and go to state 11
    IF      shift, and go to state 62
    WHILE   shift, and go to state 63
    FOR     shift, and go to state 64
    RETURN  shift, and go to state 65
    ';'     shift, and go to state 66
    '{'     shift, and go to state 67

    stmt           go to state 185
    compound_stmt  go to state 72
    assignment     go to state 73
    proc_call      go to state 74
    variable       go to state 75
    Ident          go to state 76


State 185

   38 stmt: FOR '(' optional_assgt semicolon optional_boolexp semicolon optional_assgt ')' stmt .

    $default  reduce using rule 38 (stmt)
